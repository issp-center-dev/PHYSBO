# -*- coding: utf-8 -*-
#
# PHYSBO documentation build configuration file, created by
# sphinx-quickstart on Wed Jul 31 13:10:39 2019.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

import sys
import os

sys.path.insert(0, os.path.abspath("../../../../../physbo"))

# -- Project information -----------------------------------------------------

project = "PHYSBO"
copyright = "2020-, PHYSBO developers"
author = "PHYSBO developers"

# The short X.Y version.
version = "3.0"
# The full version, including alpha/beta/rc tags.
release = "3.0-dev"

# for jupyter-notebook

from recommonmark.parser import CommonMarkParser

source_parsers = {
    ".md": CommonMarkParser,
}

from recommonmark.transform import AutoStructify

github_doc_root = "https://github.com/rtfd/recommonmark/tree/master/doc/"


def setup(app):
    app.add_config_value(
        "recommonmark_config",
        {
            "url_resolver": lambda url: github_doc_root + url,
            "auto_toc_tree_section": "Contents",
        },
        True,
    )
    app.add_transform(AutoStructify)


pygments_style = "sphinx"
nbsphinx_execute = "never"

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.mathjax",
    "sphinx.ext.ifconfig",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "nbsphinx",
]

numfig = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ["../../_templates"]

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ["_build", "**.ipynb_checkpoints"]
for t in ("tag-latex", "tag-latexpdf", "tag-latexpdfja"):
    if t in tags:
        print(t)
        exclude_patterns.append("api")

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = [".rst", ".md"]

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"
html_log = "logo.png"
html_theme_options = {"logo_only": True}


# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {"font_family": "Helvetica", "sidebar_search_button": "pink_1"}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["../../_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
# html_sidebars = {
#     "**": [
#         "about.html",
#         "navigation.html",
#         "relations.html",
#         "searchbox.html",
#         "donate.html",
#     ]
# }


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "PHYSBOdoc"


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        "index",
        "PHYSBO_en.tex",
        u"PHYSBO Documentation",
        u"PHYSBO's team",
        "manual",
        "True",
    ),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "PHYSBO", u"PHYSBO Documentation", [author], 1)]

# latex_docclass =  {'manual': 'jsbook'}
latex_logo = "../../_static/logo.png"

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "PHYSBO",
        u"PHYSBO Documentation",
        author,
        "PHYSBO",
        "One line description of project.",
        "Miscellaneous",
    ),
]

# -- configuring _template/version.html -------------------------------------

html_context = {}

html_context["ENABLE_VERSIONING"] = os.environ.get("CI", "false")

html_context["languages"] = [("en"), ("ja")]
html_context["current_lang"] = language

current_version = os.environ.get("TARGET_NAME", "")
if not current_version:
    current_version = release
html_context["current_version"] = current_version

html_context["branches"] = ["develop", "master"]
html_context["tags"] = []
exclude_tags = ["v0.1.0", "v0.2.0", "v0.3.0"]

try:
    import git

    repo = git.Repo(search_parent_directories=True)
    tags = list(map(str, repo.tags))
    tags.sort(reverse=True)
    for tag in tags:
        if tag not in exclude_tags:
            html_context["tags"].append(tag)
except:
    pass

if current_version not in html_context["branches"]:
    if current_version not in html_context["tags"]:
        html_context["branches"].append(current_version)
