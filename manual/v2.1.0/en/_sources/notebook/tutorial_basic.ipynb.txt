{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Basic usage of PHYSBO\n",
    "\n",
    "## Introduction\n",
    "\n",
    "In this tutorial, we will introduce how to define the simulator class and find the minimum value of a one-dimensional function using PHYSBO.\n",
    "\n",
    "First, we will import PHYSBO."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:30.091028Z",
     "start_time": "2021-03-05T04:50:29.600019Z"
    }
   },
   "outputs": [],
   "source": [
    "import physbo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining the search space\n",
    "\n",
    "In the following example, the search space ``X`` is defined as a grid chopped by ``window_num=10001`` divisions from ``x_min = -2.0`` to ``x_max = 2.0``.\n",
    "Note that ``X`` must be in ``window_num`` x ``d`` ndarray format (``d`` is the number of dimensions, in this case one). In this case, ``d`` is the number of dimensions, in this case two, so we use reshape to transform it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:30.097211Z",
     "start_time": "2021-03-05T04:50:30.092637Z"
    }
   },
   "outputs": [],
   "source": [
    "#In\n",
    "import numpy as np\n",
    "import scipy\n",
    "import physbo\n",
    "import itertools\n",
    "\n",
    "#In\n",
    "#Create candidate\n",
    "window_num=10001\n",
    "x_max = 2.0\n",
    "x_min = -2.0\n",
    "\n",
    "X = np.linspace(x_min,x_max,window_num).reshape(window_num, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining the simulator class\n",
    "\n",
    "Here, we define the simulator class to set as the objective function.\n",
    "\n",
    "In this case, the problem is to find the minimum $x$ such that $f(x) = 3 x^4 + 4 x ^3 + 1.0$ (the answer is $x=-1.0$).\n",
    "\n",
    "In the simulator class, we define the ``__call__`` function (or ``__init__`` if there are initial variables, etc.).\n",
    "(If there are initial variables, define ``__init__``.) The action indicates the index number of the grid to be retrieved from the search space, and is generally in the form of an ndarray so that multiple candidates can be calculated at once.\n",
    "In this case, we choose one candidate point from ``X`` as ``action_idx=action[0]`` to calculate only one candidate at a time.\n",
    "Since **PHYSBO is designed to find the maximum value of the objective function**, it returns the value of f(x) at the candidate point multiplied by -1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:30.104491Z",
     "start_time": "2021-03-05T04:50:30.099622Z"
    }
   },
   "outputs": [],
   "source": [
    "# Declare the class for calling the simulator.\n",
    "class simulator:\n",
    "\n",
    "    def __call__(self, action ):\n",
    "        action_idx = action[0]\n",
    "        x = X[action_idx][0]\n",
    "        fx = 3.0*x**4 + 4.0*x**3 + 1.0\n",
    "        fx_list.append(fx)\n",
    "        x_list.append(X[action_idx][0])\n",
    "\n",
    "        print (\"*********************\")\n",
    "        print (\"Present optimum interactions\")\n",
    "\n",
    "        print (\"x_opt=\", x_list[np.argmin(np.array(fx_list))])\n",
    "\n",
    "        return -fx"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Performing optimization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting policy\n",
    "\n",
    "First, set the optimization `policy`.  \n",
    "\n",
    "Next, set `test_X` to the matrix of search candidates (`numpy.array`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:30.117205Z",
     "start_time": "2021-03-05T04:50:30.108470Z"
    }
   },
   "outputs": [],
   "source": [
    "# set policy \n",
    "policy = physbo.search.discrete.policy(test_X=X)\n",
    "\n",
    "# set seed\n",
    "policy.set_seed(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When `policy` is set, no optimization is done yet.\n",
    "Execute the following methods on `policy` to optimize it.\n",
    "\n",
    "- `random_search`.  \n",
    "- `bayes_search`.\n",
    "\n",
    "If you specify the `simulator` and the number of search steps in these methods, the following loop will be executed for the number of search steps.\n",
    "\n",
    "i) Select the next parameter to be executed from the candidate parameters.\n",
    "\n",
    "ii) Execute `simulator` with the selected parameters.\n",
    "\n",
    "The default number of parameter returned by i) is one, but it is possible to return multiple parameters in one step.\n",
    "See the section \"Searching for multiple candidates at once\" for details.  \n",
    "\n",
    "Also, instead of running the above loop inside PHYSBO, it is possible to control i) and ii) separately from the outside. In other words, it is possible to propose the next parameter to be executed from PHYSBO, evaluate its objective function value in some way outside PHYSBO (e.g., by experiment rather than numerical calculation), propose it in some way outside PHYSBO, and register the evaluated value in PHYSBO. For more details, please refer to the \"Running Interactively\" section of the tutorial.\n",
    "\n",
    "### Random Search\n",
    "\n",
    "First of all, let's perform a random search.\n",
    "\n",
    "Since Bayesian optimization requires at least two objective function values to be obtained (the initial number of data required depends on the problem to be optimized and the dimension d of the parameters), we will first perform a random search.   \n",
    "\n",
    "**argument**.  \n",
    "\n",
    "- `max_num_probes`: Number of search steps.  \n",
    "- `simulator`: The simulator of the objective function (an object of class simulator). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:30.149378Z",
     "start_time": "2021-03-05T04:50:30.120660Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "fx_list=[]\n",
    "x_list = []\n",
    "\n",
    "res = policy.random_search(max_num_probes=20, simulator=simulator())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When executed, the objective function value and its action ID for each step, and the best value up to now and its action ID will be printed as follows.\n",
    "\n",
    "````\n",
    "0020-th step: f(x) = -19.075990 (action=8288)\n",
    "   current best f(x) = -0.150313 (best action=2949) \n",
    "````\n",
    "\n",
    "\n",
    "### Bayesian Optimization\n",
    "\n",
    "Next, we run the Bayesian optimization as follows.\n",
    "\n",
    "**argument**.  \n",
    "\n",
    "- `max_num_probes`: Number of search steps.  \n",
    "- `simulator`: The simulator of the objective function (an object of class simulator).  \n",
    "- `score`: The type of acquisition function. You can specify one of the following\n",
    "    - TS (Thompson Sampling)  \n",
    "    - EI (Expected Improvement)  \n",
    "    - PI (Probability of Improvement)  \n",
    "- `interval`:  \n",
    "The hyperparameters are trained at the specified interval.  \n",
    "If a negative value is specified, no hyperparameter will be learned.  \n",
    "0 means that hyperparameter learning will be performed only in the first step.  \n",
    "- `num_rand_basis`: Number of basis functions. 0 means that a normal Gaussian process without Bayesian linear model will be used.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:32.482575Z",
     "start_time": "2021-03-05T04:50:30.151250Z"
    },
    "code_folding": [],
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "res = policy.bayes_search(max_num_probes=50, simulator=simulator(), score='TS', \n",
    "                                                  interval=0, num_rand_basis=500)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Checking the results\n",
    "\n",
    "The search result ``res`` is returned as an object of the ``history`` class (`physbo.search.discrete.results.history`).  \n",
    "The following is a reference to the search results.\n",
    "\n",
    "- `res.fx` : The history of evaluated values of simulator (objective function).\n",
    "- `res.chosen_actions`: The history of action IDs (parameters) when the simulator was evaluated.  \n",
    "- `fbest, best_action= res.export_all_sequence_best_fx()`: The history of best values and their action IDs (parameters) for all timings when the simulator was evaluated.\n",
    "- `res.total_num_search`: Total number of simulator evaluations.\n",
    "\n",
    "Let's plot the objective function value and the best value at each step.  \n",
    "`res.fx` and `best_fx` should range up to `res.total_num_search`, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:32.747272Z",
     "start_time": "2021-03-05T04:50:32.484125Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:32.897286Z",
     "start_time": "2021-03-05T04:50:32.754938Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f816129d820>]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(res.fx[0:res.total_num_search])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:33.056830Z",
     "start_time": "2021-03-05T04:50:32.899063Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f8130b30f70>]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "best_fx, best_action = res.export_all_sequence_best_fx()\n",
    "plt.plot(best_fx)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Serializing the results\n",
    "\n",
    "The search results can be saved to an external file using the `save` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:33.064021Z",
     "start_time": "2021-03-05T04:50:33.058426Z"
    }
   },
   "outputs": [],
   "source": [
    "res.save('search_result.npz')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:33.067954Z",
     "start_time": "2021-03-05T04:50:33.065107Z"
    }
   },
   "outputs": [],
   "source": [
    "del res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the saved result file as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:33.080105Z",
     "start_time": "2021-03-05T04:50:33.073810Z"
    }
   },
   "outputs": [],
   "source": [
    "res = physbo.search.discrete.results.history()\n",
    "res.load('search_result.npz')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, the candidate with the best score can be displayed as follows. You can see that we have arrived at the correct solution $x=-1$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:33.112487Z",
     "start_time": "2021-03-05T04:50:33.081409Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.002]\n"
     ]
    }
   ],
   "source": [
    "print(X[int(best_action[-1])])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction\n",
    "\n",
    "`policy` serves `get_post_fmean` and `get_post_fcov` methods for calculating mean value and variance of Gaussian process (post distribution). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:33.700354Z",
     "start_time": "2021-03-05T04:50:33.118203Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PolyCollection at 0x7f81613d8370>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mean = policy.get_post_fmean(X)\n",
    "var = policy.get_post_fcov(X)\n",
    "std = np.sqrt(var)\n",
    "xs = X[:,0]\n",
    "\n",
    "ax = plt.subplot()\n",
    "ax.plot(xs, mean)\n",
    "ax.fill_between(xs, mean-std, mean+std, color=\"blue\", alpha=.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Acquisition function\n",
    "\n",
    "`policy` serves `get_score` method for calculating acquisition function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:34.220216Z",
     "start_time": "2021-03-05T04:50:33.701874Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f8130b84070>]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "scores = policy.get_score(mode=\"EI\", xs=X)\n",
    "plt.plot(scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parallelization\n",
    "\n",
    "PHYSBO can calculate acquisition functions for candidates in parallel by using MPI via `mpi4py` .\n",
    "To enable MPI parallelization, pass a MPI communicator such as `MPI.COMM_WORLD` to a keyword argument, `comm` of the constructor of the `policy`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-05T04:50:34.224416Z",
     "start_time": "2021-03-05T04:50:34.222375Z"
    }
   },
   "outputs": [],
   "source": [
    "# from mpi4py import MPI\n",
    "# policy = physbo.search.discrete.policy(test_X=X, comm=MPI.COMM_WORLD)"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
